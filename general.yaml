- hosts: all
  become: true
  tasks: 
  - name: Add SSH key
    ansible.posix.authorized_key:
      user: vagrant
      state: present
      key: '{{ item }}'
    with_file:
      - public-keys/ahmed
      - public-keys/alexgliga
      - public-keys/alexpostu
      - public-keys/yulin

  - name: Disable swap
    ansible.builtin.shell: swapoff -a

  - name: Prevent re-mounting
    ansible.builtin.lineinfile:
      path: /etc/fstab
      state: absent
      regexp: 'swap'

  - name: Distribute static /etc/hosts with cluster mappings
    ansible.builtin.copy:
      src: files/hosts
      dest: /etc/hosts
      owner: root
      group: root
      mode: '0644'

  - name: Ensure apt-transport-https is present
    ansible.builtin.apt:
      name: apt-transport-https
      state: present
      update_cache: yes

  - name: Create directory for apt keyrings
    ansible.builtin.file:
      path: /etc/apt/keyrings
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: Add Kubernetes GPG keyring
    ansible.builtin.apt_key:
      url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
      keyring: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
      state: present

  - name: Add the community Kubernetes apt repository
    ansible.builtin.apt_repository:
      repo: >-
        deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg]
        https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
      filename: kubernetes
      state: present

  - name: Update apt cache
    ansible.builtin.apt:
      update_cache: yes
  
  - name: Install containerd and runc from Ubuntu
    ansible.builtin.apt:
      name:
        - containerd
        - runc
      state: present
      update_cache: no

  - name: Install kubeadm, kubelet and kubectl
    ansible.builtin.apt:
      name:
        - kubeadm
        - kubelet
        - kubectl
      state: present
      update_cache: no

  - name: Configure Kubelet to use the eth1 IP address as Node IP. # added to avoid nodes using eth0 which is non-unique
    ansible.builtin.lineinfile:
      path: /etc/default/kubelet
      regexp: '^KUBELET_EXTRA_ARGS='
      line: 'KUBELET_EXTRA_ARGS="--node-ip={{ ansible_eth1.ipv4.address }}"'
      create: yes
      owner: root
      group: root
      mode: '0644'
    when: ansible_eth1.ipv4.address is defined

  - name: Ensure /etc/containerd directory exists
    ansible.builtin.file:
      path: /etc/containerd
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: Generate default containerd config if missing
    ansible.builtin.shell: >
      containerd config default > /etc/containerd/config.toml
    args:
      creates: /etc/containerd/config.toml

  - name: Disable AppArmor in containerd config
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      regexp: '^\s*disable_apparmor\s*='
      line: '            disable_apparmor = true'

  - name: Update sandbox image version in containerd config
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      regexp: '^\s*sandbox_image\s*='
      line: '            sandbox_image = "registry.k8s.io/pause:3.10"'

  - name: Enable systemd cgroup in runc options
    ansible.builtin.lineinfile:
      path: /etc/containerd/config.toml
      regexp: '^\s*SystemdCgroup\s*='
      line: '        SystemdCgroup = true'

  - name: Restart containerd to load new config
    ansible.builtin.service:
      name: containerd
      state: restarted

  - name: Enable and start kubelet service
    ansible.builtin.systemd:
      name: kubelet
      enabled: yes
      state: started

  - name: Add modules
    ansible.builtin.copy:
      content: "overlay\nbr_netfilter"
      dest: /etc/modules-load.d/k8s.conf

  - name: Load modules
    community.general.modprobe:
      name: br_netfilter
      state: present
      
  - name: Create Kubernetes module load configuration
    ansible.builtin.copy:
      content: |
        overlay
        br_netfilter
      dest: /etc/modules-load.d/k8s.conf
  
  - name: Load overlay module
    ansible.builtin.shell: modprobe overlay
  
  - name: Load br_netfilter module
    ansible.builtin.shell: modprobe br_netfilter
  
  - name: Verify overlay is loaded
    ansible.builtin.shell: lsmod | grep overlay
    register: overlay_check

  - name: Verify br_netfilter is loaded
    ansible.builtin.shell: lsmod | grep br_netfilter
    register: br_netfilter_check
  
  - name: Display overlay load status
    debug:
      msg: "{{ overlay_check.stdout }}"
  
  - name: Display br_netfilter load status
    debug:
      msg: "{{ br_netfilter_check.stdout }}"

  - name: Ensure required sysctl params for Kubernetes networking
    ansible.builtin.sysctl:
      name: "{{ item.name }}"
      value: "{{ item.value }}"
      sysctl_file: /etc/sysctl.d/k8s.conf
      state: present
      reload: yes
    loop:
      - { name: net.ipv4.ip_forward,                 value: "1" }
      - { name: net.bridge.bridge-nf-call-iptables,  value: "1" }
      - { name: net.bridge.bridge-nf-call-ip6tables, value: "1" }
    loop_control:
      label: "{{ item.name }}"

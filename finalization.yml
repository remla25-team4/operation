---
- hosts: 192.168.56.100
  become: no
  gather_facts: yes

  vars:
    istio_version: "1.26.0"
    istio_arch_map:
      x86_64: "amd64"
      aarch64: "arm64"
      arm64: "arm64"
    # Determine the Istio architecture string based on the gathered fact
    istio_target_arch: "{{ istio_arch_map[ansible_architecture] | default('amd64') }}"

  tasks:
    # step 20 Install MetalLB
    - name: Ensure MetalLB namespace exists
      kubernetes.core.k8s:
        name: "metallb-system"
        api_version: v1
        kind: Namespace
        state: present

    - name: Copy local MetalLB manifest to controller node
      ansible.builtin.copy:
        src: "files/metallb-native-v0.14.9.yaml"
        dest: "/tmp/metallb-native-v0.14.9.yaml"
        mode: '0644'

    - name: Apply MetalLB manifest from controller node
      kubernetes.core.k8s:
        state: present
        src: "/tmp/metallb-native-v0.14.9.yaml"

    - name: Wait for MetalLB controller/webhook to be ready
      ansible.builtin.command:
        kubectl wait -n metallb-system -l app=metallb,component=controller --for=condition=ready pod
        --timeout=60s
      changed_when: false

    - name: Define MetalLB IPAddressPool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: default-pool
            namespace: "metallb-system"
          spec:
            addresses:
              - "192.168.56.90-192.168.56.99"

    - name: Define MetalLB L2Advertisement
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: default-l2
            namespace: "metallb-system"
          spec:
            ipAddressPools:
              - default-pool

    # step 21: add nginx ingress controller
    - name: Add ingress-nginx Helm repository
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: "https://kubernetes.github.io/ingress-nginx"
        state: present

    - name: Ensure ingress namespace exists
      kubernetes.core.k8s:
        name: "ingress-nginx"
        api_version: v1
        kind: Namespace
        state: present

    - name: Install/Upgrade ingress-nginx Helm chart with fixed IP
      kubernetes.core.helm:
        name: "ingress-nginx"
        chart_ref: "ingress-nginx/ingress-nginx"
        release_namespace: "ingress-nginx"
        create_namespace: yes
        state: present
        values:
          controller:
            service:
              loadBalancerIP: "192.168.56.90"

    - name: Wait for Nginx controller Deployment to be ready
      ansible.builtin.command: >
        kubectl wait deployment ingress-nginx-controller --for condition=Available=True
        -n ingress-nginx
        --timeout=60s
      changed_when: false

    # Step 22: get Kubernetes Dashboard
    - name: Add Kubernetes Dashboard Helm repository
      kubernetes.core.helm_repository:
        name: "kubernetes-dashboard"
        repo_url: "https://kubernetes.github.io/dashboard/"
        state: present

    - name: Ensure Kubernetes Dashboard namespace exists
      kubernetes.core.k8s:
        name: "kubernetes-dashboard"
        api_version: v1
        kind: Namespace
        state: present

    - name: Install Kubernetes Dashboard Helm chart
      kubernetes.core.helm:
        name: "kubernetes-dashboard"
        chart_ref: "kubernetes-dashboard/kubernetes-dashboard"
        release_namespace: "kubernetes-dashboard"
        create_namespace: yes
        state: present

    - name: Create Dashboard Admin ServiceAccount
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: "admin-user"
            namespace: "kubernetes-dashboard"

    - name: Create Dashboard Admin ClusterRoleBinding
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: "admin-user-cluster-admin"
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
            - kind: ServiceAccount
              name: "admin-user"
              namespace: "kubernetes-dashboard"

    - name: Create Ingress for Kubernetes Dashboard
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: kubernetes-dashboard-ingress
            namespace: "kubernetes-dashboard"
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            ingressClassName: nginx
            rules:
              - host: "dashboard.local"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: kubernetes-dashboard
                          port:
                            number: 443

    - name: "Debug: Detected system architecture and chosen Istio architecture"
      ansible.builtin.debug:
        msg: "System architecture (ansible_architecture): {{ ansible_architecture }}, Istio download architecture: {{ istio_target_arch }}"

    # step 23 get istio
    - name: "Download and Unarchive Istio {{ istio_version }} for {{ istio_target_arch }} architecture"
      ansible.builtin.unarchive:
        src: "https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux-{{ istio_target_arch }}.tar.gz"
        dest: "/home/vagrant/"
        owner: vagrant
        group: vagrant
        remote_src: yes
        creates: "/home/vagrant/istio-{{ istio_version }}/bin/istioctl"

    - name: "Add Istio {{ istio_version }} istioctl to vagrant user's PATH in .profile"
      ansible.builtin.lineinfile:
        path: /home/vagrant/.profile
        line: 'export PATH="$HOME/istio-{{ istio_version }}/bin:$PATH"'
        create: yes
        owner: vagrant
        group: vagrant
        mode: '0644'
        regexp: '^export PATH="\$HOME/istio-{{ istio_version }}/bin:'

    - name: "Install Istio {{ istio_version }} using istioctl"
      ansible.builtin.command:
        cmd: "/home/vagrant/istio-{{ istio_version }}/bin/istioctl install -y"
      become: yes
      become_user: vagrant
      environment:
        KUBECONFIG: "/home/vagrant/.kube/config"
      args:
        chdir: "/home/vagrant/istio-{{ istio_version }}/"

    - name: Patch Istio ingress gateway with fixed IP
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: istio-ingressgateway
            namespace: istio-system
          spec:
            type: LoadBalancer
            loadBalancerIP: 192.168.56.91
            ports:
              - port: 80
                targetPort: 8080
                name: http
              - port: 443
                targetPort: 8443
                name: https

    # Part from here below is used for the self-signed TLS certifcate.

    #This is where we generate the certificate itself.
    - name: Generate self-signed TLS certificate for dashboard.local
      ansible.builtin.command: >
        openssl req -x509 -nodes -days 365 -newkey rsa:2048
        -subj "/CN=dashboard.local"
        -keyout /tmp/dashboard.key
        -out /tmp/dashboard.crt
      args:
        creates: /tmp/dashboard.crt
    # We then create the TLS secret
    - name: Create TLS secret 
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: dashboard-tls
            namespace: kubernetes-dashboard
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ lookup('file', '/tmp/dashboard.crt') | b64encode }}"
            tls.key: "{{ lookup('file', '/tmp/dashboard.key') | b64encode }}"

    # Create Ingress for Kubernetes Dashboard with HTTPS
    - name: Create Ingress for Kubernetes Dashboard
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: kubernetes-dashboard-ingress
            namespace: "kubernetes-dashboard"
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
            ingressClassName: nginx
            tls:
              - hosts:
                  - dashboard.local
                secretName: dashboard-tls
            rules:
              - host: "dashboard.local"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: kubernetes-dashboard
                          port:
                            number: 443




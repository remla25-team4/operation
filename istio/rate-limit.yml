# Add Redis database to save user request counts
apiVersion: v1
kind: Service
metadata: 
  name: redis
  namespace: istio-system
  labels:
    app: redis
spec:
  ports:
  - name: redis
    port: 6379
  selector: 
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - image: redis:alpine
        imagePullPolicy: IfNotPresent
        name: redis
        ports:
        - name: redis
          containerPort: 6379
      restartPolicy: Always
---
# Configure the rate limits for Envoy
apiVersion: v1
kind: ConfigMap
metadata:
  name: ratelimit-config
  namespace: istio-system
data:
  config.yml: |
    domain: user-ratelimit
    descriptors:
      - key: remote_address
        rate_limit: 
          unit: day
          requests_per_unit: 500
---
# setup envoy ratelimit service + deployment to check incoming requests
apiVersion: v1
kind: Service
metadata:
  name: ratelimit                 
  namespace: istio-system
  labels:
    app: ratelimit
spec:
  ports:
  - name: http-port #http port for health checks
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: grpc-port  #grpc port for ratelimit checks
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: http-debug # port for debugging
    port: 6070
    targetPort: 6070
    protocol: TCP
  selector:
    app: ratelimit
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ratelimit
  namespace: istio-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ratelimit
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ratelimit
    spec:
      containers:
      - image: envoyproxy/ratelimit:30a4ce1a
        imagePullPolicy: IfNotPresent
        name: ratelimit
        command: ["/bin/ratelimit"]
        env:
        - name: LOG_LEVEL
          value: debug
        - name: REDIS_SOCKET_TYPE
          value: tcp
        - name: REDIS_URL
          value: redis:6379
        - name: USE_STATSD
          value: "false"
        - name: RUNTIME_ROOT
          value: /data
        - name: RUNTIME_SUBDIRECTORY
          value: ratelimit
        - name: RUNTIME_WATCH_ROOT
          value: "false"
        - name: RUNTIME_IGNOREDOTFILES
          value: "true"
        - name: HOST
          value: "::"
        - name: GRPC_HOST
          value: "::"
        ports:
        - containerPort: 8080
        - containerPort: 8081
        - containerPort: 6070
        volumeMounts:
        - name: config-volume
          mountPath: /data/ratelimit/config
      volumes:
      - name: config-volume
        configMap:
          name: ratelimit-config
---
# Configure EnvoyFilter at the gateway of the cluster to apply ratelimiting
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: user-rate-limit-filter
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch: 
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.ratelimit
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.ratelimit.v3.RateLimit
          domain: user-ratelimit
          failure_mode_deny: true
          timeout: 10s
          rate_limit_service: 
            grpc_service: 
              envoy_grpc:
                cluster_name: outbound|8081||ratelimit.istio-system.svc.cluster.local #Istio auto discovery
                authority: ratelimit.istio-system.svc.cluster.local
            transport_api_version: V3
  - applyTo: VIRTUAL_HOST
    match:
      context: GATEWAY
    patch:
      operation: MERGE
      value:
        rate_limits:
        - actions:
          - remote_address: {}